# Docker Compose configuration for Meme Card Game Backend

services:
  # FastAPI приложение
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-meme_user}:${POSTGRES_PASSWORD:-meme_password}@postgres:5432/${POSTGRES_DB:-meme_game}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-168}
      - DEBUG=${DEBUG:-true}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - APP_NAME=${APP_NAME:-Meme Card Game API}
      - VERSION=${VERSION:-1.0.0}
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      - AZURE_CONTAINER_NAME=${AZURE_CONTAINER_NAME:-memes}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-35-turbo}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-12-01-preview}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
    networks:
      - meme_network
    restart: unless-stopped

  # PostgreSQL база данных
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-meme_game}
      - POSTGRES_USER=${POSTGRES_USER:-meme_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-meme_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - meme_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meme_user} -d ${POSTGRES_DB:-meme_game}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - meme_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker для фоновых задач (временно отключен)
  # celery_worker:
  #   build: .
  #   command: celery -A app.core.celery_app worker --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:password@postgres:5432/meme_game
  #     - REDIS_URL=redis://redis:6379/0
  #     - JWT_SECRET_KEY=${JWT_SECRET_KEY:-fallback-secret-key}
  #   depends_on:
  #     - postgres
  #     - redis
  #   volumes:
  #     - ./app:/app/app
  #   networks:
  #     - meme_network
  #   restart: unless-stopped

  # Celery beat для периодических задач (временно отключен)
  # celery_beat:
  #   build: .
  #   command: celery -A app.core.celery_app beat --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:password@postgres:5432/meme_game
  #     - REDIS_URL=redis://redis:6379/0
  #     - JWT_SECRET_KEY=${JWT_SECRET_KEY:-fallback-secret-key}
  #   depends_on:
  #     - postgres
  #     - redis
  #   volumes:
  #     - ./app:/app/app
  #   networks:
  #     - meme_network
  #   restart: unless-stopped

  # Nginx reverse proxy (временно отключен)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - app
  #   networks:
  #     - meme_network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  meme_network:
    driver: bridge
