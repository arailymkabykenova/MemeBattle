"""
Azure Blob Storage –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç, –ø–æ–ª—É—á–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –º–µ–º-–∫–∞—Ä—Ç–æ—á–µ–∫.
"""

import logging
from typing import List, Optional, Dict, Any
import asyncio
from concurrent.futures import ThreadPoolExecutor
import os

from ..core.config import settings

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Azure SDK
try:
    from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
    from azure.core.exceptions import ResourceNotFoundError, ResourceExistsError
    AZURE_AVAILABLE = True
except ImportError:
    AZURE_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    BlobServiceClient = None
    BlobClient = None 
    ContainerClient = None
    ResourceNotFoundError = Exception
    ResourceExistsError = Exception

logger = logging.getLogger(__name__)


class AzureBlobService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Azure Blob Storage"""
    
    def __init__(self):
        self.connection_string = settings.azure_storage_connection_string
        self.container_name = settings.azure_container_name or "meme-cards"
        self.blob_service_client = None
        self.container_client = None
        self._cards_cache = {}  # –ö—ç—à –∫–∞—Ä—Ç –ø–æ –ø–∞–ø–∫–∞–º
        self._initialize_client()
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Azure –∫–ª–∏–µ–Ω—Ç–∞"""
        if not AZURE_AVAILABLE:
            logger.warning("‚ö†Ô∏è Azure SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install azure-storage-blob")
            self.blob_service_client = None
            self.container_client = None
            return
            
        try:
            if self.connection_string:
                self.blob_service_client = BlobServiceClient.from_connection_string(
                    self.connection_string
                )
                self.container_client = self.blob_service_client.get_container_client(
                    self.container_name
                )
                logger.info(f"‚úÖ Azure Blob Storage –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É: {self.container_name}")
            else:
                logger.warning("‚ö†Ô∏è Azure connection string –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Azure: {e}")
            self.blob_service_client = None
            self.container_client = None
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Azure"""
        return self.blob_service_client is not None and self.container_client is not None
    
    async def ensure_container_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if not self.is_connected():
            return False
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ thread pool, —Ç–∞–∫ –∫–∞–∫ Azure SDK —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                await loop.run_in_executor(
                    executor, 
                    self.container_client.create_container
                )
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {self.container_name} —Å–æ–∑–¥–∞–Ω")
            return True
        except ResourceExistsError:
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {self.container_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False
    
    async def list_cards_in_folder(self, folder: str) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø–∞–ø–∫–µ.
        
        Args:
            folder: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (starter, standard, unique)
            
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç
        """
        if not self.is_connected():
            logger.warning("Azure –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if folder in self._cards_cache:
            return self._cards_cache[folder]
        
        try:
            cards = []
            prefix = f"{folder}/"
            
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                blob_list = await loop.run_in_executor(
                    executor,
                    lambda: list(self.container_client.list_blobs(name_starts_with=prefix))
                )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–±—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            image_blobs = [blob for blob in blob_list 
                          if blob.name.lower().endswith(('.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'))]
            image_blobs.sort(key=lambda x: x.name)
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
            for index, blob in enumerate(image_blobs, 1):
                cards.append(index)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cards_cache[folder] = cards
            
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø–∞–ø–∫–µ {folder}")
            return cards
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {folder}: {e}")
            return []
    
    async def list_cards_in_folder_with_details(self, folder: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø–∞–ø–∫–µ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.
        
        Args:
            folder: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (starter, standard, unique)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.is_connected():
            logger.warning("Azure –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return []
        
        try:
            cards = []
            prefix = f"{folder}/"
            
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                blob_list = await loop.run_in_executor(
                    executor,
                    lambda: list(self.container_client.list_blobs(name_starts_with=prefix))
                )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–±—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            image_blobs = [blob for blob in blob_list 
                          if blob.name.lower().endswith(('.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'))]
            image_blobs.sort(key=lambda x: x.name)
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
            for index, blob in enumerate(image_blobs, 1):
                filename = os.path.basename(blob.name)
                name_without_ext = os.path.splitext(filename)[0]
                
                cards.append({
                    "filename": filename,
                    "blob_path": blob.name,
                    "url": self._get_blob_url(blob.name),
                    "size": blob.size,
                    "last_modified": blob.last_modified,
                    "card_number": index,  # –ù–æ–º–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É
                    "card_name": name_without_ext,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    "card_type": folder
                })
            
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø–∞–ø–∫–µ {folder}")
            return cards
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {folder}: {e}")
            return []
    
    def get_card_url(self, card_type: str, card_number: int) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –∫–∞—Ä—Ç—ã –ø–æ —Ç–∏–ø—É –∏ –Ω–æ–º–µ—Ä—É.
        
        Args:
            card_type: –¢–∏–ø –∫–∞—Ä—Ç—ã (starter, standard, unique)
            card_number: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ø–∞–ø–∫–µ
            
        Returns:
            Optional[str]: URL –∫–∞—Ä—Ç—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if not self.is_connected():
            return f"https://placeholder.example.com/{card_type}_{card_number}.jpg"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–±–æ–≤ –≤ –ø–∞–ø–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            prefix = f"{card_type}/"
            blob_list = list(self.container_client.list_blobs(name_starts_with=prefix))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            image_blobs = [blob for blob in blob_list 
                          if blob.name.lower().endswith(('.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'))]
            image_blobs.sort(key=lambda x: x.name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
            if 1 <= card_number <= len(image_blobs):
                blob = image_blobs[card_number - 1]  # –ò–Ω–¥–µ–∫—Å—ã —Å 0, –Ω–æ–º–µ—Ä–∞ —Å 1
                return self._get_blob_url(blob.name)
            
            logger.warning(f"‚ùå –ö–∞—Ä—Ç–∞ {card_type}:{card_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è {card_type}:{card_number}: {e}")
            return None
    
    def _extract_number_from_filename(self, filename: str) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, img1 -> 1).
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            
        Returns:
            Optional[int]: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ None
        """
        import re
        
        # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (img1, card123, 001 –∏ —Ç.–¥.)
        match = re.search(r'(\d+)', filename)
        if match:
            return int(match.group(1))
        return None
    
    def _get_blob_url(self, blob_path: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞.
        
        Args:
            blob_path: –ü—É—Ç—å –∫ blob –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            
        Returns:
            str: –ü—É–±–ª–∏—á–Ω—ã–π URL
        """
        if not self.is_connected():
            return f"https://placeholder.example.com/{os.path.basename(blob_path)}"
        
        try:
            blob_client = self.blob_service_client.get_blob_client(
                container=self.container_name, 
                blob=blob_path
            )
            return blob_client.url
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è {blob_path}: {e}")
            return f"https://placeholder.example.com/{os.path.basename(blob_path)}"
    
    async def upload_card_image(self, local_path: str, blob_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Azure.
        
        Args:
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            blob_path: –ü—É—Ç—å –≤ Azure (–Ω–∞–ø—Ä–∏–º–µ—Ä, "starter/meme_001.jpg")
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_connected():
            logger.warning("Azure –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                with open(local_path, 'rb') as data:
                    blob_client = self.blob_service_client.get_blob_client(
                        container=self.container_name, 
                        blob=blob_path
                    )
                    await loop.run_in_executor(
                        executor,
                        lambda: blob_client.upload_blob(data, overwrite=True)
                    )
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {local_path} -> {blob_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_path}: {e}")
            return False
    
    async def get_storage_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –∫–∞—Ä—Ç–æ—á–µ–∫.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        if not self.is_connected():
            return {
                "connected": False,
                "error": "Azure –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            }
        
        stats = {
            "connected": True,
            "container": self.container_name,
            "folders": {}
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
        for folder in ['starter', 'standard', 'unique']:
            cards = await self.list_cards_in_folder_with_details(folder)
            stats["folders"][folder] = {
                "count": len(cards),
                "cards": cards[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_cards = sum(stats["folders"][folder]["count"] for folder in stats["folders"])
        stats["total_cards"] = total_cards
        
        return stats

    async def debug_list_all_blobs(self) -> Dict[str, Any]:
        """
        –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        
        Returns:
            Dict: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        """
        if not self.is_connected():
            return {
                "connected": False,
                "error": "Azure –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            }
        
        try:
            all_blobs = []
            folders = set()
            
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                blob_list = await loop.run_in_executor(
                    executor,
                    lambda: list(self.container_client.list_blobs())
                )
            
            for blob in blob_list:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –ø—É—Ç–∏
                parts = blob.name.split('/')
                if len(parts) > 1:
                    folder = parts[0]
                    folders.add(folder)
                
                all_blobs.append({
                    "name": blob.name,
                    "size": blob.size,
                    "is_image": blob.name.lower().endswith(('.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'))
                })
            
            return {
                "connected": True,
                "container": self.container_name,
                "total_blobs": len(all_blobs),
                "folders_found": list(folders),
                "all_blobs": all_blobs[:20]  # –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Azure: {e}")
            return {
                "connected": True,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
azure_service = AzureBlobService() 