"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ..core.database import get_db
from ..core.dependencies import get_current_user
from ..models.user import User
from ..schemas.game import (
    GameResponse, GameRoundResponse, PlayerChoiceCreate, PlayerChoiceResponse,
    VoteCreate, VoteResponse, RoundResultResponse, GameStateResponse,
    SituationGenerateRequest, SituationResponse
)
from ..services.game_service import GameService
from ..services.room_service import RoomService
from ..utils.exceptions import AppException, create_http_exception

router = APIRouter(prefix="/games", tags=["games"])


# === –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ú–ê–†–®–†–£–¢–´ (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í–´–®–ï –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–•) ===

@router.get("/my-cards-for-game")
async def get_my_cards_for_game(
    count: int = 3,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã.
    
    - **count**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞.
    """
    try:
        game_service = GameService(db)
        return await game_service.card_service.get_user_cards_for_game(current_user.id, count)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/situations/generate", response_model=SituationResponse)
async def generate_situation(
    request: SituationGenerateRequest,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    üß™ –¢–ï–°–¢–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ!
    –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è:
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–π
    - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    - –†—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    - **topic**: –¢–µ–º–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **difficulty**: –°–ª–æ–∂–Ω–æ—Å—Ç—å (easy/medium/hard) 
    - **age_group**: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
    
    üéÆ –î–ª—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: POST /games/{game_id}/rounds (–±–µ–∑ situation_text)
    """
    try:
        # üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        # TODO: –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å AI Service –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI
        
        test_situations = [
            "–í—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –ª–∏—Ñ—Ç–µ —Å –∫–æ–ª–ª–µ–≥–æ–π, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç–µ?",
            "–í—ã —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –±–æ—Å—Å–∞. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
            "–ù–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –≤–∞—Å —Å–ø—Ä–æ—Å–∏–ª–∏ –æ –Ω–∞–≤—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –Ω–µ—Ç, –Ω–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ä–µ–∑—é–º–µ. –ö–∞–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ?",
            "–í—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ –∏–∑–º–µ–Ω—è–µ—Ç —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç–µ?",
            "–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –≤–∞–º –ø—Ä–∏–Ω–µ—Å–ª–∏ —Å—á–µ—Ç —Å —á—É–∂–∏–º –∑–∞–∫–∞–∑–æ–º (–Ω–∞–º–Ω–æ–≥–æ –¥–æ—Ä–æ–∂–µ). –û—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç –æ—à–∏–±–∫—É. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
            "–í—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ–¥—Å–ª—É—à–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ —Ç–æ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é—Ç —É–≤–æ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–≥–∏. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç–µ?",
            "–í–∞—à —Å–æ—Å–µ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –≥—Ä–æ–º–∫—É—é –º—É–∑—ã–∫—É –ø–æ –Ω–æ—á–∞–º. –ö–∞–∫ —Ä–µ—à–∞–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—É?",
            "–ù–∞ –ø–µ—Ä–≤–æ–º —Å–≤–∏–¥–∞–Ω–∏–∏ –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –≤–∞–º —Å–∫—É—á–Ω–æ. –ù–æ —á–µ–ª–æ–≤–µ–∫ —è–≤–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ?",
            "–í—ã –Ω–∞—à–ª–∏ –∫–æ—à–µ–ª–µ–∫ —Å –±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π –¥–µ–Ω–µ–≥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç–µ?",
            "–í —Å–∞–º–æ–ª–µ—Ç–µ —Ä—è–¥–æ–º —Å–∏–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å. –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è?"
        ]
        
        import random
        
        situation_text = random.choice(test_situations)
        
        return SituationResponse(
            situation_text=situation_text,
            topic=request.topic,
            estimated_difficulty="medium",
            generated_at=datetime.utcnow()
        )
        
    except Exception as e:
        # üß™ –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–≥—Ä—ã)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {str(e)}"
        )


@router.get("/rooms/{room_id}/current-game", response_model=Optional[GameResponse])
async def get_current_game_in_room(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    """
    try:
        game_service = GameService(db)
        game = await game_service.get_game_by_room(room_id)
        
        if not game:
            return None
            
        return GameResponse(
            id=game.id,
            room_id=game.room_id,
            status=game.status,
            current_round=game.current_round,
            winner_id=game.winner_id,
            created_at=game.created_at,
            finished_at=game.finished_at
        )
    except AppException as e:
        raise create_http_exception(e)


# === –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@router.get("/{game_id}", response_model=GameResponse)
async def get_game(
    game_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ.
    
    - **game_id**: ID –∏–≥—Ä—ã
    """
    try:
        game_service = GameService(db)
        game = await game_service._get_game_or_404(game_id)
        
        return GameResponse(
            id=game.id,
            room_id=game.room_id,
            status=game.status,
            current_round=game.current_round,
            winner_id=game.winner_id,
            created_at=game.created_at,
            finished_at=game.finished_at
        )
    except AppException as e:
        raise create_http_exception(e)


@router.post("/{game_id}/rounds", response_model=GameRoundResponse)
async def start_round(
    game_id: int,
    situation_text: Optional[str] = None,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã.
    
    - **game_id**: ID –∏–≥—Ä—ã
    - **situation_text**: –¢–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    –ï—Å–ª–∏ situation_text –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–∏—Ç—É–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ AI.
    –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞—É–Ω–¥—ã.
    """
    try:
        game_service = GameService(db)
        return await game_service.start_round(game_id, situation_text)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/rounds/{round_id}/choices", response_model=PlayerChoiceResponse)
async def submit_card_choice(
    round_id: int,
    choice_data: PlayerChoiceCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É –¥–ª—è —Ä–∞—É–Ω–¥–∞.
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    - **card_type**: –¢–∏–ø –∫–∞—Ä—Ç—ã (starter/standard/unique)
    - **card_number**: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ Azure –ø–∞–ø–∫–µ
    
    –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–ª–∞–¥–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π.
    """
    try:
        game_service = GameService(db)
        return await game_service.submit_card_choice(round_id, current_user.id, choice_data)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/rounds/{round_id}/voting/start")
async def start_voting(
    round_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    
    –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—ã.
    """
    try:
        game_service = GameService(db)
        return await game_service.start_voting(round_id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/rounds/{round_id}/votes", response_model=VoteResponse)
async def submit_vote(
    round_id: int,
    vote_data: VoteCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ò–≥—Ä–æ–∫ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –∫–∞—Ä—Ç—É.
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    - **choice_id**: ID –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≥–æ–ª–æ—Å—É–µ–º
    
    –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ—é –∫–∞—Ä—Ç—É.
    """
    try:
        game_service = GameService(db)
        return await game_service.submit_vote(round_id, current_user.id, vote_data)
    except AppException as e:
        raise create_http_exception(e)


@router.get("/rounds/{round_id}/results", response_model=RoundResultResponse)
async def get_round_results(
    round_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞.
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã, –≥–æ–ª–æ—Å–∞ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞.
    """
    try:
        game_service = GameService(db)
        return await game_service.calculate_round_results(round_id)
    except AppException as e:
        raise create_http_exception(e)


@router.get("/rounds/{round_id}/choices")
async def get_round_choices_for_voting(
    round_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[PlayerChoiceResponse]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –≤ —Ä–∞—É–Ω–¥–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –∫—Ä–æ–º–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.
    """
    try:
        game_service = GameService(db)
        return await game_service.get_choices_for_voting(round_id, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/{game_id}/end")
async def end_game(
    game_id: int,
    reason: str = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ",
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ.
    
    - **game_id**: ID –∏–≥—Ä—ã
    - **reason**: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    
    –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ.
    """
    try:
        game_service = GameService(db)
        return await game_service.end_game(game_id, reason)
    except AppException as e:
        raise create_http_exception(e)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ò–ì–†–û–ö–û–í ===

@router.post("/rooms/{room_id}/ping")
async def ping_player(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    
    –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10-15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    try:
        game_service = GameService(db)
        success = await game_service.player_manager.update_player_activity(current_user.id, room_id)
        
        return {
            "success": success,
            "player_id": current_user.id,
            "timestamp": datetime.utcnow(),
            "message": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞" if success else "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ"
        }
    except AppException as e:
        raise create_http_exception(e)


@router.get("/rooms/{room_id}/players-status")
async def get_players_status(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
    """
    try:
        game_service = GameService(db)
        return await game_service.player_manager.get_active_players(room_id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/rooms/{room_id}/check-timeouts")
async def check_players_timeout(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–∞–π–º–∞—É—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
    """
    try:
        game_service = GameService(db)
        timeout_players = await game_service.player_manager.check_players_timeout(room_id)
        
        return {
            "timeout_players": timeout_players,
            "count": len(timeout_players),
            "checked_at": datetime.utcnow()
        }
    except AppException as e:
        raise create_http_exception(e)


@router.get("/rounds/{round_id}/action-status")
async def get_action_status(
    round_id: int,
    action_type: str,  # "card_selection" –∏–ª–∏ "voting"
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞—É–Ω–¥–µ.
    
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    - **action_type**: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("card_selection" –∏–ª–∏ "voting")
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ç–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ, –∫—Ç–æ –∂–¥–µ—Ç, –∫—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω.
    """
    try:
        game_service = GameService(db)
        game_round = await game_service._get_round_or_404(round_id)
        game = await game_service._get_game_or_404(game_round.game_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–∫–∞–º
        player_stats = await game_service.player_manager.get_players_for_action(game.room_id, action_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action_type == "card_selection":
            completed_result = await db.execute(
                select(PlayerChoice.user_id, User.nickname)
                .join(User, PlayerChoice.user_id == User.id)
                .where(PlayerChoice.round_id == round_id)
            )
        else:  # voting
            completed_result = await db.execute(
                select(Vote.voter_id, User.nickname)
                .join(User, Vote.voter_id == User.id)
                .where(Vote.round_id == round_id)
            )
        
        completed_players = [
            {"user_id": user_id, "nickname": nickname}
            for user_id, nickname in completed_result
        ]
        
        return {
            "round_id": round_id,
            "action_type": action_type,
            "player_stats": player_stats,
            "completed_players": completed_players,
            "completion_rate": f"{len(completed_players)}/{player_stats['total_active']}",
            "all_completed": len(completed_players) >= player_stats["connected"],
            "deadline": game_round.selection_deadline if action_type == "card_selection" else game_round.voting_deadline,
            "time_remaining": (
                (game_round.selection_deadline if action_type == "card_selection" else game_round.voting_deadline) - datetime.utcnow()
            ).total_seconds() if game_round.selection_deadline else None
        }
    except AppException as e:
        raise create_http_exception(e) 


@router.get("/rounds/{round_id}/all-choices")
async def get_all_choices_for_round(
    round_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[PlayerChoiceResponse]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –≤ —Ä–∞—É–Ω–¥–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤/–∞–¥–º–∏–Ω–∫–∏).
    - **round_id**: ID —Ä–∞—É–Ω–¥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ user_id.
    """
    try:
        game_service = GameService(db)
        return await game_service.get_all_choices_for_round(round_id)
    except AppException as e:
        raise create_http_exception(e) 