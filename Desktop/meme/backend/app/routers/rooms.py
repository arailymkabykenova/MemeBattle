"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.
"""

from typing import List, Dict, Any, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_

from ..core.database import get_db
from ..core.dependencies import get_current_user
from ..models.user import User
from ..schemas.game import (
    RoomCreate, RoomResponse, RoomDetailResponse, RoomJoinByCode,
    QuickMatchRequest, QuickMatchResponse
)
from ..services.room_service import RoomService
from ..utils.exceptions import AppException, create_http_exception

router = APIRouter(prefix="/rooms", tags=["rooms"])


@router.post("/", response_model=RoomResponse, status_code=status.HTTP_201_CREATED)
async def create_room(
    room_data: RoomCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.
    
    - **max_players**: –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ (3-8)
    - **is_public**: –ü—É–±–ª–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ (–≤–∏–¥–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
    - **generate_code**: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    
    –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ–¥.
    """
    try:
        room_service = RoomService(db)
        return await room_service.create_room(current_user.id, room_data)
    except AppException as e:
        raise create_http_exception(e)


@router.get("/available", response_model=List[RoomResponse])
async def get_available_rooms(
    limit: int = 20,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    
    - **limit**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.
    """
    try:
        room_service = RoomService(db)
        return await room_service.get_available_rooms(limit)
    except AppException as e:
        raise create_http_exception(e)


@router.get("/my-room", response_model=Optional[RoomDetailResponse])
async def get_my_current_room(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.
    """
    try:
        room_service = RoomService(db)
        return await room_service.get_user_current_room(current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.get("/{room_id}", response_model=RoomDetailResponse)
async def get_room_details(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    
    üîí –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.
    """
    try:
        room_service = RoomService(db)
        return await room_service.get_room_details(room_id, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/{room_id}/join", response_model=RoomDetailResponse)
async def join_room(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ ID.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    """
    try:
        room_service = RoomService(db)
        return await room_service.join_room(room_id, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/join-by-code", response_model=RoomDetailResponse)
async def join_room_by_code(
    join_data: RoomJoinByCode,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ 6-–∑–Ω–∞—á–Ω–æ–º—É –∫–æ–¥—É.
    
    - **room_code**: 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123)
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª—é–±–æ–π –∫–æ–º–Ω–∞—Ç–µ (–ø—É–±–ª–∏—á–Ω–æ–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π)
    –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥.
    """
    try:
        room_service = RoomService(db)
        return await room_service.join_room_by_code(join_data.room_code, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/quick-match", response_model=QuickMatchResponse)
async def quick_match(
    request: QuickMatchRequest,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä—ã (matchmaking).
    
    - **preferred_players**: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (3-8)
    - **max_wait_time**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10-120)
    
    –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é.
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫ –ø—É–±–ª–∏—á–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º.
    """
    try:
        room_service = RoomService(db)
        return await room_service.quick_match(current_user.id, request)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/{room_id}/leave")
async def leave_room(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞
    
    –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.
    """
    try:
        room_service = RoomService(db)
        return await room_service.leave_room(room_id, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


@router.post("/{room_id}/start-game")
async def start_game(
    room_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ.
    
    –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.
            –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞.
    
    - **room_id**: ID –∫–æ–º–Ω–∞—Ç—ã
    """
    try:
        room_service = RoomService(db)
        return await room_service.start_game(room_id, current_user.id)
    except AppException as e:
        raise create_http_exception(e)


# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===

@router.get("/stats/summary")
async def get_rooms_stats(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º.
    """
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        from sqlalchemy import select, func
        from ..models.game import Room, RoomStatus
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç (–ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)
        active_rooms_result = await db.execute(
            select(func.count(Room.id))
            .where(Room.status == RoomStatus.WAITING)
        )
        active_rooms = active_rooms_result.scalar() or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–∞—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç
        playing_rooms_result = await db.execute(
            select(func.count(Room.id))
            .where(Room.status == RoomStatus.PLAYING)
        )
        playing_rooms = playing_rooms_result.scalar() or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        public_rooms_result = await db.execute(
            select(func.count(Room.id))
            .where(
                and_(
                    Room.status == RoomStatus.WAITING,
                    Room.is_public == True
                )
            )
        )
        public_rooms = public_rooms_result.scalar() or 0
        
        return {
            "active_rooms": active_rooms,
            "playing_rooms": playing_rooms,
            "public_rooms": public_rooms,
            "private_rooms": active_rooms - public_rooms,
            "total_rooms": active_rooms + playing_rooms
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        ) 