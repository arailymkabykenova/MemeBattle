"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.
"""

from typing import Optional, List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, or_
from sqlalchemy.orm import selectinload
import asyncio
from datetime import date

from ..models.game import Room, RoomParticipant, Game
from ..models.user import User
from ..models.game import RoomStatus, ParticipantStatus, GameStatus
from ..schemas.game import (
    RoomCreate, RoomResponse, RoomDetailResponse, RoomParticipantResponse,
    RoomJoinByCode, QuickMatchRequest, QuickMatchResponse
)
from ..utils.exceptions import ValidationError, NotFoundError, PermissionError
from ..services.user_service import UserService


class RoomService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def _determine_age_group(self, user: User) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ birth_date"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å birth_date
        if not user or not user.birth_date:
            return "young_adults"  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
            
        today = date.today()
        age = today.year - user.birth_date.year - ((today.month, today.day) < (user.birth_date.month, user.birth_date.day))
        if age < 13:
            return "kids"
        elif age < 18:
            return "teens"
        elif age < 30:
            return "young_adults"
        elif age < 60:
            return "adults"
        else:
            return "seniors"

    async def create_room(self, creator_id: int, room_data: RoomCreate) -> RoomResponse:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.
        
        Args:
            creator_id: ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
            room_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
            
        Returns:
            RoomResponse: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω
        user = await self.db.get(User, creator_id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await self.db.refresh(user)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: User {creator_id} - nickname: {user.nickname}, birth_date: {user.birth_date}, gender: {user.gender}")
        print(f"DEBUG: is_profile_complete: {user.is_profile_complete}")
        
        if not user.is_profile_complete:
            raise ValidationError("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∏–∫–Ω–µ–π–º, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
        existing_room = await self.db.execute(
            select(Room).where(
                and_(
                    Room.creator_id == creator_id,
                    Room.status.in_([RoomStatus.WAITING, RoomStatus.PLAYING])
                )
            )
        )
        if existing_room.scalar():
            raise ValidationError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
        room_code = None
        if room_data.generate_code or not room_data.is_public:
            room_code = await self._generate_unique_room_code()
        
        # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: age_group –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room_data.is_public:
            # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ–º age_group –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            user = await self.db.get(User, creator_id)
            age_group = await self._determine_age_group(user) if user else "young_adults"
        else:
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "mixed" - –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            age_group = "mixed"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = Room(
            creator_id=creator_id,
            max_players=room_data.max_players,
            status=RoomStatus.WAITING,
            room_code=room_code,
            is_public=room_data.is_public,
            age_group=age_group
        )
        self.db.add(room)
        await self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = RoomParticipant(
            room_id=room.id,
            user_id=creator_id,
            status=ParticipantStatus.ACTIVE
        )
        self.db.add(participant)
        
        # –ù–ï –∫–æ–º–º–∏—Ç–∏–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FastAPI dependency —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
        return RoomResponse(
            id=room.id,
            creator_id=room.creator_id,
            max_players=room.max_players,
            status=room.status,
            room_code=room.room_code,
            is_public=room.is_public,
            created_at=room.created_at,
            current_players=1
        )
    
    async def join_room(self, room_id: int, user_id: int) -> RoomDetailResponse:
        """
        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –ü–£–ë–õ–ò–ß–ù–û–ô –∫–æ–º–Ω–∞—Ç–µ.
        –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ join_room_by_code.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            RoomDetailResponse: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω
        user = await self.db.get(User, user_id)
        if not user or not user.is_profile_complete:
            raise ValidationError("–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∏–∫–Ω–µ–π–º, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª)")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = await self._get_room_or_404(room_id)
        
        # üîí –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ö–û–ú–ù–ê–¢–ê –ü–£–ë–õ–ò–ß–ù–ê–Ø
        if not room.is_public:
            raise PermissionError("–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
        if room.status != RoomStatus.WAITING:
            raise ValidationError("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        existing_participant = await self.db.execute(
            select(RoomParticipant).where(
                and_(
                    RoomParticipant.room_id == room_id,
                    RoomParticipant.user_id == user_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
        )
        if existing_participant.scalar():
            raise ValidationError("–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        current_players = await self._get_active_players_count(room_id)
        if current_players >= room.max_players:
            raise ValidationError("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        return await self._join_room_internal(room_id, user_id)
    
    async def join_room_by_code(self, room_code: str, user_id: int) -> RoomDetailResponse:
        """
        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ –∫–æ–¥—É.
        
        Args:
            room_code: 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            RoomDetailResponse: –ö–æ–º–Ω–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω
        user = await self.db.get(User, user_id)
        if not user or not user.is_profile_complete:
            raise ValidationError("–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∏–∫–Ω–µ–π–º, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª)")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–æ–¥—É
        room_result = await self.db.execute(
            select(Room).where(
                and_(
                    Room.room_code == room_code.upper(),
                    Room.status == RoomStatus.WAITING
                )
            )
        )
        room = room_result.scalar()
        
        if not room:
            raise NotFoundError("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_public)
        return await self._join_room_internal(room.id, user_id)
    
    async def quick_match(self, user_id: int, request: QuickMatchRequest) -> QuickMatchResponse:
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä—ã (matchmaking).
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            QuickMatchResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        current_room = await self.get_user_current_room(user_id)
        if current_room:
            return QuickMatchResponse(
                success=False,
                message="–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è age_group
        user = await self.db.get(User, user_id)
        age_group = await self._determine_age_group(user) if user else None
        
        # üéØ –°–¢–†–û–ì–ò–ô –ü–û–ò–°–ö: –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¢–û–õ–¨–ö–û —Å –Ω—É–∂–Ω–æ–π age_group
        # –ò—Å–∫–ª—é—á–∞–µ–º "mixed" –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã Quick Match –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        query = select(Room, func.count(RoomParticipant.id).label('current_players')).join(
            RoomParticipant, Room.id == RoomParticipant.room_id
        ).where(
            and_(
                Room.status == RoomStatus.WAITING,
                Room.is_public == True,
                RoomParticipant.status == ParticipantStatus.ACTIVE,
                Room.age_group == age_group,  # –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                Room.age_group != "mixed"     # –ò—Å–∫–ª—é—á–∞–µ–º mixed –∫–æ–º–Ω–∞—Ç—ã
            )
        ).group_by(Room.id)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä–æ–∫–æ–≤
        if request.preferred_players:
            query = query.having(
                and_(
                    func.count(RoomParticipant.id) < Room.max_players,  # –ï—Å—Ç—å –º–µ—Å—Ç–æ
                    Room.max_players == request.preferred_players  # –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä
                )
            )
        else:
            query = query.having(func.count(RoomParticipant.id) < Room.max_players)
        
        query = query.order_by(func.count(RoomParticipant.id).desc())  # –°–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        
        result = await self.db.execute(query)
        rooms = result.all()
        
        if rooms:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
            room, current_players = rooms[0]
            try:
                room_details = await self.join_room(room.id, user_id)
                return QuickMatchResponse(
                    success=True,
                    room_id=room.id,
                    room_code=room.room_code,
                    message=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! –ò–≥—Ä–æ–∫–æ–≤: {current_players + 1}/{room.max_players}"
                )
            except ValidationError as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
                pass
        
        # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–Ω–∞—Ç –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å age_group
        room_data = RoomCreate(
            max_players=request.preferred_players or 6,
            is_public=True,
            generate_code=False
        )
        
        new_room = await self.create_room(user_id, room_data)
        return QuickMatchResponse(
            success=True,
            room_id=new_room.id,
            room_code=new_room.room_code,
            wait_time=request.max_wait_time,
            message="–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞! –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤..."
        )
    
    async def leave_room(self, room_id: int, user_id: int) -> Dict[str, Any]:
        """
        –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        room = await self._get_room_or_404(room_id)
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant_result = await self.db.execute(
            select(RoomParticipant).where(
                and_(
                    RoomParticipant.room_id == room_id,
                    RoomParticipant.user_id == user_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
        )
        participant = participant_result.scalar()
        if not participant:
            raise ValidationError("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã")
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–∫–∏–Ω—É–≤—à–µ–≥–æ
        participant.status = ParticipantStatus.LEFT
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∫–æ–º–Ω–∞—Ç–∞ –µ—â–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –æ—Ç–º–µ–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        if room.creator_id == user_id and room.status == RoomStatus.WAITING:
            room.status = RoomStatus.CANCELLED
            # –ù–ï –∫–æ–º–º–∏—Ç–∏–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FastAPI dependency —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            return {
                "success": True,
                "message": "–ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –µ–µ",
                "room_cancelled": True
            }
        
        # –ù–ï –∫–æ–º–º–∏—Ç–∏–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FastAPI dependency —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        return {
            "success": True,
            "message": "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É",
            "room_cancelled": False
        }
    
    async def start_game(self, room_id: int, user_id: int) -> Dict[str, Any]:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        room = await self._get_room_or_404(room_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç–µ–ª—å
        if room.creator_id != user_id:
            raise PermissionError("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
        if room.status != RoomStatus.WAITING:
            raise ValidationError("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        active_players = await self._get_active_players_count(room_id)
        if active_players < 3:
            raise ValidationError("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞")
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
        room.status = RoomStatus.PLAYING
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        game = Game(
            room_id=room_id,
            status=GameStatus.STARTING,
            current_round=1
        )
        self.db.add(game)
        
        # Flush —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∏–≥—Ä—ã
        await self.db.flush()
        
        # –ù–ï –∫–æ–º–º–∏—Ç–∏–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FastAPI dependency —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        
        return {
            "success": True,
            "message": "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
            "game_id": game.id,
            "players_count": active_players
        }
    
    async def get_room_details(self, room_id: int, user_id: Optional[int] = None) -> RoomDetailResponse:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞)
            
        Returns:
            RoomDetailResponse: –î–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room_result = await self.db.execute(
            select(Room).where(Room.id == room_id)
        )
        room = room_result.scalar()
        if not room:
            raise NotFoundError("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # üîí –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –î–õ–Ø –ü–†–ò–í–ê–¢–ù–´–• –ö–û–ú–ù–ê–¢
        if not room.is_public and user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            participant_check = await self.db.execute(
                select(RoomParticipant).where(
                    and_(
                        RoomParticipant.room_id == room_id,
                        RoomParticipant.user_id == user_id,
                        RoomParticipant.status == ParticipantStatus.ACTIVE
                    )
                )
            )
            if not participant_check.scalar():
                raise PermissionError("–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        elif not room.is_public and not user_id:
            raise PermissionError("–ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
        participants_result = await self.db.execute(
            select(RoomParticipant, User.nickname)
            .join(User, RoomParticipant.user_id == User.id)
            .where(
                and_(
                    RoomParticipant.room_id == room_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
            .order_by(RoomParticipant.joined_at)
        )
        
        participants = []
        for participant, nickname in participants_result:
            participants.append(RoomParticipantResponse(
                id=participant.id,
                room_id=participant.room_id,
                user_id=participant.user_id,
                user_nickname=nickname or f"–ò–≥—Ä–æ–∫ {participant.user_id}",
                joined_at=participant.joined_at,
                status=participant.status
            ))
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        creator_result = await self.db.execute(
            select(User.nickname).where(User.id == room.creator_id)
        )
        creator_nickname = creator_result.scalar() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return RoomDetailResponse(
            id=room.id,
            creator_id=room.creator_id,
            max_players=room.max_players,
            status=room.status,
            room_code=room.room_code,
            is_public=room.is_public,
            created_at=room.created_at,
            current_players=len(participants),
            participants=participants,
            creator_nickname=creator_nickname,
            can_start_game=(len(participants) >= 3 and room.status == RoomStatus.WAITING)
        )
    
    async def get_available_rooms(self, limit: int = 20) -> List[RoomResponse]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
            
        Returns:
            List[RoomResponse]: –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        """
        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_count_subq = (
            select(func.count(RoomParticipant.id))
            .where(
                and_(
                    RoomParticipant.room_id == Room.id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
            .scalar_subquery()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
        rooms_result = await self.db.execute(
            select(Room, participants_count_subq.label('current_players'))
            .where(
                and_(
                    Room.status == RoomStatus.WAITING,
                    Room.is_public == True  # –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
                )
            )
            .order_by(Room.created_at.desc())
            .limit(limit)
        )
        
        rooms = []
        for room, current_players in rooms_result:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç—ã —Å —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
            if current_players < room.max_players:
                rooms.append(RoomResponse(
                    id=room.id,
                    creator_id=room.creator_id,
                    max_players=room.max_players,
                    status=room.status,
                    room_code=room.room_code,
                    is_public=room.is_public,
                    created_at=room.created_at,
                    current_players=current_players or 0
                ))
        
        return rooms
    
    async def get_user_current_room(self, user_id: int) -> Optional[RoomDetailResponse]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[RoomDetailResponse]: –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ None
        """
        print(f"üîç DEBUG: Looking for current room for user {user_id}")
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        participant_result = await self.db.execute(
            select(RoomParticipant.room_id)
            .join(Room, RoomParticipant.room_id == Room.id)
            .where(
                and_(
                    RoomParticipant.user_id == user_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE,
                    Room.status.in_([RoomStatus.WAITING, RoomStatus.PLAYING])
                )
            )
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = participant_result.fetchall()
        print(f"üîç DEBUG: All results for user {user_id}: {all_results}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        room_id = all_results[0][0] if all_results else None
        print(f"üîç DEBUG: Found room_id {room_id} for user {user_id}")
        
        if room_id:
            print(f"üîç DEBUG: Getting room details for room {room_id}")
            return await self.get_room_details(room_id, user_id)
        
        print(f"üîç DEBUG: No current room found for user {user_id}")
        return None
    
    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
    
    async def _join_room_internal(self, room_id: int, user_id: int) -> RoomDetailResponse:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_public –∏ age_group).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∫–æ–¥—É –∏ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        
        üéØ –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç age_group, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞–º –ª—é–±–æ–≥–æ 
        –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º –ø–æ –∫–æ–¥—É.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            RoomDetailResponse: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö)
        room = await self._get_room_or_404(room_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
        if room.status != RoomStatus.WAITING:
            raise ValidationError("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        existing_participant = await self.db.execute(
            select(RoomParticipant).where(
                and_(
                    RoomParticipant.room_id == room_id,
                    RoomParticipant.user_id == user_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
        )
        if existing_participant.scalar():
            raise ValidationError("–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        current_players = await self._get_active_players_count(room_id)
        if current_players >= room.max_players:
            raise ValidationError("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        
        # üéØ –£–î–ê–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê age_group - —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –ª—é–±–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–æ–≥—É—Ç 
        # –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º –ø–æ –∫–æ–¥—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = RoomParticipant(
            room_id=room_id,
            user_id=user_id,
            status=ParticipantStatus.ACTIVE
        )
        self.db.add(participant)
        await self.db.flush()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ø–∞–¥–µ—Ç –≤ –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
        
        return await self.get_room_details(room_id, user_id)
    
    async def _get_room_or_404(self, room_id: int) -> Room:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç 404"""
        result = await self.db.execute(select(Room).where(Room.id == room_id))
        room = result.scalar()
        if not room:
            raise NotFoundError("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return room
    
    async def _get_active_players_count(self, room_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        result = await self.db.execute(
            select(func.count(RoomParticipant.id))
            .where(
                and_(
                    RoomParticipant.room_id == room_id,
                    RoomParticipant.status == ParticipantStatus.ACTIVE
                )
            )
        )
        return result.scalar() or 0
    
    async def _generate_unique_room_code(self, max_attempts: int = 10) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.
        
        Args:
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        """
        for _ in range(max_attempts):
            code = Room.generate_room_code()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            existing = await self.db.execute(
                select(Room).where(Room.room_code == code)
            )
            if not existing.scalar():
                return code
        
        raise ValidationError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã") 