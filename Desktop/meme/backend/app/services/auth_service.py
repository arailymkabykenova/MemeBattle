"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.
"""

from typing import Optional, Tuple
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from jose import JWTError, jwt

from ..repositories.user_repository import UserRepository
from ..services.user_service import UserService
from ..schemas.user import UserResponse, UserProfileCreate
from ..schemas.auth import AuthResponse
from ..core.config import settings
from ..utils.exceptions import AuthenticationError, UserNotFoundError, ValidationError


class AuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
        self.user_repo = UserRepository(db)
        self.user_service = UserService(db)
    
    async def authenticate_device(self, device_id: str) -> AuthResponse:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Device ID.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ.
        
        Args:
            device_id: Device ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            AuthResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
            
        Raises:
            AuthenticationError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_or_create_by_device_id(device_id)
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            access_token = self._create_access_token(user.id, device_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_new_user = not user.is_profile_complete
            
            user_response = UserResponse.model_validate(user)
            return AuthResponse(
                access_token=access_token,
                token_type="bearer",
                user=user_response.model_dump(),
                is_new_user=is_new_user
            )
            
        except Exception as e:
            raise AuthenticationError(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
    
    async def complete_user_profile(self, user_id: int, profile_data: UserProfileCreate) -> UserResponse:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            UserResponse: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Raises:
            UserNotFoundError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            ValidationError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
        existing_user = await self.user_repo.get_by_nickname(profile_data.nickname)
        if existing_user and existing_user.id != user_id:
            raise ValidationError(f"–ù–∏–∫–Ω–µ–π–º '{profile_data.nickname}' —É–∂–µ –∑–∞–Ω—è—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        user = await self.user_repo.complete_profile(user_id, profile_data)
        if not user:
            raise UserNotFoundError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Flush —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –≤–∏–¥–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await self.db.flush()
        
        # üé¥ –í–´–î–ê–ï–ú –°–¢–ê–†–¢–û–í–´–ï –ö–ê–†–¢–´ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        try:
            await self.user_service.assign_starter_cards(user_id, count=10)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ 10 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –≤—ã–¥–∞–ª–∏—Å—å
        
        return UserResponse.model_validate(user)
    
    async def verify_token(self, token: str) -> Optional[UserResponse]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
            
        Returns:
            Optional[UserResponse]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        try:
            payload = jwt.decode(
                token, 
                settings.jwt_secret_key, 
                algorithms=[settings.jwt_algorithm]
            )
            user_id: int = int(payload.get("sub"))
            device_id: str = payload.get("device_id")
            
            if user_id is None or device_id is None:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_by_id(user_id)
            if not user or user.device_id != device_id:
                return None
            
            return UserResponse.model_validate(user)
            
        except JWTError:
            return None
    
    def _create_access_token(self, user_id: int, device_id: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            device_id: Device ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: JWT —Ç–æ–∫–µ–Ω
        """
        expire = datetime.utcnow() + timedelta(hours=settings.jwt_expiration_hours)
        
        to_encode = {
            "sub": str(user_id),
            "device_id": device_id,
            "exp": expire,
            "type": "access"
        }
        
        return jwt.encode(
            to_encode, 
            settings.jwt_secret_key, 
            algorithm=settings.jwt_algorithm
        )
    
    async def get_current_user(self, token: str) -> UserResponse:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É.
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
            
        Returns:
            UserResponse: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Raises:
            AuthenticationError: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        user = await self.verify_token(token)
        if not user:
            raise AuthenticationError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        
        return user
    
    async def logout_user(self, token: str) -> bool:
        """
        –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
        –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
        """
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        user = await self.verify_token(token)
        return user is not None
