"""
Game Event Handler –¥–ª—è WebSocket.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

from typing import Dict, Any, Optional
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from .connection_manager import get_connection_manager
from ..services.game_service import GameService
from ..services.room_service import RoomService
from ..services.player_manager import PlayerManager
from ..models.game import GameStatus, RoomStatus
from ..utils.exceptions import AppException

logger = logging.getLogger(__name__)


class GameEventHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è WebSocket"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
        self.game_service = GameService(db)
        self.room_service = RoomService(db)
        self.player_manager = PlayerManager(db)
    
    async def handle_player_action(self, action_type: str, data: dict, user_id: int) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥—Ä—É–≥–∏—Ö.
        
        Args:
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            data: –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            user_id: ID –∏–≥—Ä–æ–∫–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            if action_type == "ping":
                return await self._handle_ping(user_id, data)
            elif action_type == "join_room":
                return await self._handle_join_room(user_id, data)
            elif action_type == "leave_room":
                return await self._handle_leave_room(user_id, data)
            elif action_type == "start_game":
                return await self._handle_start_game(user_id, data)
            elif action_type == "start_round":
                return await self._handle_start_round(user_id, data)
            elif action_type == "submit_card_choice":
                return await self._handle_card_choice(user_id, data)
            elif action_type == "submit_vote":
                return await self._handle_vote(user_id, data)
            elif action_type == "get_game_state":
                return await self._handle_get_game_state(user_id, data)
            elif action_type == "get_round_cards":
                return await self._handle_get_round_cards(user_id, data)
            elif action_type == "get_choices_for_voting":
                return await self._handle_get_choices_for_voting(user_id, data)
            else:
                return {"success": False, "error": f"Unknown action: {action_type}"}
                
        except AppException as e:
            logger.error(f"Game action error: {e}")
            return {"success": False, "error": str(e)}
        except Exception as e:
            logger.error(f"Unexpected error in game action: {e}")
            return {"success": False, "error": "Internal server error"}
    
    async def _handle_ping(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ping –æ—Ç –∏–≥—Ä–æ–∫–∞"""
        connection_manager = get_connection_manager()
        room_id = connection_manager.get_user_room(user_id)
        if room_id:
            await self.player_manager.update_player_activity(user_id, room_id)
        
        return {
            "success": True,
            "type": "pong",
            "timestamp": datetime.utcnow().isoformat(),
            "room_id": room_id
        }
    
    async def _handle_join_room(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        connection_manager = get_connection_manager()
        room_id = data.get("room_id")
        room_code = data.get("room_code")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        current_websocket_room = connection_manager.get_user_room(user_id)
        if current_websocket_room and current_websocket_room == room_id:
            return {"success": False, "error": "–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ WebSocket"}
        
        try:
            if room_code:
                # üîí –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç)
                room_details = await self.room_service.join_room_by_code(room_code, user_id)
                room_id = room_details.id
            elif room_id:
                # üåê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç)
                room_details = await self.room_service.join_room(room_id, user_id)
            else:
                return {"success": False, "error": "room_id (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç) –∏–ª–∏ room_code (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            if not current_websocket_room:
                await connection_manager.join_room(user_id, room_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
            await self._broadcast_room_state(room_id)
            
            return {
                "success": True,
                "message": f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}",
                "room": room_details.model_dump()
            }
            
        except Exception as e:
            logger.error(f"Error joining room: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_leave_room(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
        room_id = connection_manager.get_user_room(user_id)
        if not room_id:
            return {"success": False, "error": "Not in any room"}
        
        try:
            # –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = await self.room_service.leave_room(room_id, user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await connection_manager.leave_room(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
            if not result.get("room_cancelled", False):
                await self._broadcast_room_state(room_id)
            
            return result
            
        except Exception as e:
            logger.error(f"Error leaving room: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_start_game(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
        room_id = connection_manager.get_user_room(user_id)
        if not room_id:
            return {"success": False, "error": "Not in any room"}
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            result = await self.room_service.start_game(room_id, user_id)
            
            if result["success"]:
                game_id = result["game_id"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ WebSocket –∏–≥—Ä—É
                room_users = connection_manager.get_room_users(room_id)
                for player_id in room_users:
                    await connection_manager.join_game(player_id, game_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                await connection_manager.broadcast_to_room({
                    "type": "game_started",
                    "game_id": game_id,
                    "room_id": room_id,
                    "timestamp": datetime.utcnow().isoformat(),
                    "message": "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥..."
                }, room_id)
            
            return result
            
        except Exception as e:
            logger.error(f"Error starting game: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_start_round(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        room_id = connection_manager.get_user_room(user_id)
        if not room_id:
            return {"success": False, "error": "Not in any room"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        situation_text = data.get("situation_text")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
            game = await self.game_service.get_game_by_room(room_id)
            if not game:
                return {"success": False, "error": "No active game in room"}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥ (AI —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –µ—Å–ª–∏ situation_text=None)
            round_result = await self.game_service.start_round(game.id, situation_text)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
            await connection_manager.broadcast_to_game({
                "type": "round_started",
                "game_id": game.id,
                "round_id": round_result.id,
                "round_number": round_result.round_number,
                "situation_text": round_result.situation_text,
                "duration_seconds": round_result.duration_seconds,
                "timestamp": datetime.utcnow().isoformat(),
                "message": f"–†–∞—É–Ω–¥ {round_result.round_number} –Ω–∞—á–∞–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É."
            }, game.id)
            
            return {
                "success": True,
                "round": {
                    "id": round_result.id,
                    "round_number": round_result.round_number,
                    "situation_text": round_result.situation_text,
                    "duration_seconds": round_result.duration_seconds,
                    "started_at": round_result.started_at.isoformat() if round_result.started_at else None
                }
            }
            
        except Exception as e:
            logger.error(f"Error starting round: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_card_choice(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–º"""
        round_id = data.get("round_id")
        if not round_id:
            return {"success": False, "error": "round_id required"}
        
        from ..schemas.game import PlayerChoiceCreate
        choice_data = PlayerChoiceCreate(
            card_type=data.get("card_type"),
            card_number=data.get("card_number")
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
        result = await self.game_service.submit_card_choice(round_id, user_id, choice_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏ –∫–æ–º–Ω–∞—Ç—É
        game_round = await self.game_service._get_round_or_404(round_id)
        game = await self.game_service._get_game_or_404(game_round.game_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –≤—ã–±–æ—Ä–µ (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã)
        await connection_manager.broadcast_to_game({
            "type": "player_chose_card",
            "user_id": user_id,
            "round_id": round_id,
            "timestamp": datetime.utcnow().isoformat(),
            "message": f"–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É"
        }, game.id, exclude_user=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        await self._check_and_notify_voting_start(game.id, round_id)
        
        return {
            "success": True,
            "choice": {
                "id": result.id,
                "card_type": result.card_type,
                "card_number": result.card_number,
                "submitted_at": result.submitted_at.isoformat()
            }
        }
    
    async def _handle_vote(self, user_id: int, data: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        round_id = data.get("round_id")
        choice_id = data.get("choice_id")
        
        if not round_id or not choice_id:
            return {"success": False, "error": "round_id and choice_id required"}
        
        from ..schemas.game import VoteCreate
        vote_data = VoteCreate(choice_id=choice_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        result = await self.game_service.submit_vote(round_id, user_id, vote_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É
        game_round = await self.game_service._get_round_or_404(round_id)
        game = await self.game_service._get_game_or_404(game_round.game_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –≥–æ–ª–æ—Å–µ
        await connection_manager.broadcast_to_game({
            "type": "player_voted",
            "user_id": user_id,
            "round_id": round_id,
            "timestamp": datetime.utcnow().isoformat(),
            "message": f"–ò–≥—Ä–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª"
        }, game.id, exclude_user=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        await self._check_and_notify_results(game.id, round_id)
        
        return {
            "success": True,
            "vote": {
                "id": result.id,
                "choice_id": result.choice_id,
                "created_at": result.created_at.isoformat()
            }
        }
    
    async def _handle_get_game_state(self, user_id: int, data: dict) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        connection_manager = get_connection_manager()
        room_id = connection_manager.get_user_room(user_id)
        if not room_id:
            return {"success": False, "error": "Not in any room"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
        game = await self.game_service.get_game_by_room(room_id)
        if not game:
            return {"success": False, "error": "No active game in room"}
        
        # TODO: –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        # –í–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥, –≤—ã–±–æ—Ä—ã, –≥–æ–ª–æ—Å–∞, etc.
        
        return {
            "success": True,
            "game_state": {
                "game_id": game.id,
                "room_id": room_id,
                "status": game.status,
                "current_round": game.current_round,
                # –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
            }
        }
    
    async def _handle_get_round_cards(self, user_id: int, data: dict) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—É–Ω–¥–∞"""
        round_id = data.get("round_id")
        if not round_id:
            return {"success": False, "error": "round_id required"}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—É–Ω–¥–∞
            cards = await self.game_service.get_round_cards_for_user(round_id, user_id)
            
            return {
                "success": True,
                "round_id": round_id,
                "cards": [
                    {
                        "card_type": card["card_type"],
                        "card_number": card["card_number"],
                        "card_url": card["card_url"]
                    } for card in cards
                ]
            }
            
        except Exception as e:
            logger.error(f"Error getting round cards: {e}")
            return {"success": False, "error": str(e)}
    
    async def _handle_get_choices_for_voting(self, user_id: int, data: dict) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Å–≤–æ–µ–≥–æ)"""
        round_id = data.get("round_id")
        if not round_id:
            return {"success": False, "error": "round_id required"}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä—ã –∫–∞—Ä—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            choices = await self.game_service.get_choices_for_voting(round_id, user_id)
            
            return {
                "success": True,
                "round_id": round_id,
                "choices": [
                    {
                        "id": choice.id,
                        "user_id": choice.user_id,
                        "user_nickname": choice.user_nickname,
                        "card_type": choice.card_type,
                        "card_number": choice.card_number,
                        "card_url": choice.card_url,
                        "vote_count": choice.vote_count
                    } for choice in choices
                ]
            }
            
        except Exception as e:
            logger.error(f"Error getting choices for voting: {e}")
            return {"success": False, "error": str(e)}
    
    async def _broadcast_room_state(self, room_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        try:
            room_details = await self.room_service.get_room_details(room_id)
            
            await connection_manager.broadcast_to_room({
                "type": "room_state_updated",
                "room": room_details.model_dump(),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å
                "timestamp": datetime.utcnow().isoformat()
            }, room_id)
            
        except Exception as e:
            logger.error(f"Failed to broadcast room state: {e}")
    
    async def _check_and_notify_voting_start(self, game_id: int, round_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            game = await self.game_service._get_game_or_404(game_id)
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if game.status == GameStatus.VOTING:
                await connection_manager.broadcast_to_game({
                    "type": "voting_started",
                    "game_id": game_id,
                    "round_id": round_id,
                    "timestamp": datetime.utcnow().isoformat(),
                    "message": "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!"
                }, game_id)
                
        except Exception as e:
            logger.error(f"Failed to check voting start: {e}")
    
    async def _check_and_notify_results(self, game_id: int, round_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—É–Ω–¥–∞"""
        try:
            game = await self.game_service._get_game_or_404(game_id)
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø–µ—Ä–µ—à–ª–∞ –∫ –ø–æ–∫–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if game.status == GameStatus.ROUND_RESULTS:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = await self.game_service.calculate_round_results(round_id)
                
                await connection_manager.broadcast_to_game({
                    "type": "round_results",
                    "game_id": game_id,
                    "round_id": round_id,
                    "results": {
                        "winner": {
                            "user_id": results.winner_choice.user_id if results.winner_choice else None,
                            "nickname": results.winner_choice.user_nickname if results.winner_choice else None,
                            "card_type": results.winner_choice.card_type if results.winner_choice else None,
                            "card_number": results.winner_choice.card_number if results.winner_choice else None,
                            "vote_count": results.winner_choice.vote_count if results.winner_choice else 0
                        },
                        "next_round_starts_in": results.next_round_starts_in
                    },
                    "timestamp": datetime.utcnow().isoformat(),
                    "message": f"–†–∞—É–Ω–¥ {results.round_number} –∑–∞–≤–µ—Ä—à–µ–Ω!"
                }, game_id)
                
        except Exception as e:
            logger.error(f"Failed to check round results: {e}")
    
    async def notify_timeout_warning(self, game_id: int, round_id: int, action_type: str, seconds_left: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è —Ç–∞–π–º–∞—É—Ç–µ"""
        await connection_manager.broadcast_to_game({
            "type": "timeout_warning",
            "game_id": game_id,
            "round_id": round_id,
            "action_type": action_type,
            "seconds_left": seconds_left,
            "timestamp": datetime.utcnow().isoformat(),
            "message": f"–û—Å—Ç–∞–ª–æ—Å—å {seconds_left} —Å–µ–∫—É–Ω–¥ –Ω–∞ {action_type}!"
        }, game_id)
    
    async def notify_player_timeout(self, game_id: int, user_id: int, action_type: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –∑–∞ —Ç–∞–π–º–∞—É—Ç"""
        await connection_manager.broadcast_to_game({
            "type": "player_timeout",
            "game_id": game_id,
            "user_id": user_id,
            "action_type": action_type,
            "timestamp": datetime.utcnow().isoformat(),
            "message": f"–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        }, game_id)
    
    async def notify_game_ended(self, game_id: int, reason: str, winner_id: Optional[int] = None):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
        await connection_manager.broadcast_to_game({
            "type": "game_ended",
            "game_id": game_id,
            "reason": reason,
            "winner_id": winner_id,
            "timestamp": datetime.utcnow().isoformat(),
            "message": f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {reason}"
        }, game_id) 