"""
WebSocket Connection Manager.
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

from typing import Dict, List, Optional, Set, Callable, Any
import json
import asyncio
from datetime import datetime
from fastapi import WebSocket, WebSocketDisconnect
import logging

from ..models.user import User
from ..core.redis import RedisClient

logger = logging.getLogger(__name__)


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, redis_client: Optional[RedisClient] = None):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {user_id: WebSocket}
        self.active_connections: Dict[int, WebSocket] = {}
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö: {room_id: {user_id}}
        self.room_users: Dict[int, Set[int]] = {}
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∏–≥—Ä–∞—Ö: {game_id: {user_id}}
        self.game_users: Dict[int, Set[int]] = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ: {user_id: room_id}
        self.user_room: Dict[int, int] = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ: {user_id: game_id}  
        self.user_game: Dict[int, int] = {}
        
        # Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.redis_client = redis_client
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Redis —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç: {room_id: callback}
        self.redis_event_handlers: Dict[int, Callable] = {}
    
    async def connect(self, websocket: WebSocket, user: User, room_id: Optional[int] = None, db_session = None):
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ WebSocket.
        
        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        await websocket.accept()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.id in self.active_connections:
            try:
                await self.active_connections[user.id].close()
            except:
                pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.active_connections[user.id] = websocket
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        current_room_id = None
        print(f"üîç DEBUG: Starting room sync for user {user.id}, db_session: {db_session is not None}")
        if db_session:
            try:
                from ..services.room_service import RoomService
                room_service = RoomService(db_session)
                print(f"üîç DEBUG: Checking current room for user {user.id}")
                current_room = await room_service.get_user_current_room(user.id)
                print(f"üîç DEBUG: current_room for user {user.id}: {current_room}")
                if current_room:
                    current_room_id = current_room.id
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebSocket –∫–æ–º–Ω–∞—Ç—É –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    await self._sync_join_room(user.id, current_room_id)
                    print(f"üîç DEBUG: User {user.id} synced to existing room {current_room_id}")
                else:
                    print(f"üîç DEBUG: User {user.id} has no current room in database")
            except Exception as e:
                print(f"üîç DEBUG: Failed to sync user room state for user {user.id}: {e}")
        else:
            print(f"üîç DEBUG: No db_session provided for user {user.id}, skipping room sync")
        
        logger.info(f"User {user.id} ({user.nickname}) connected to WebSocket")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print(f"üîç DEBUG: Sending connection_established with room_id: {current_room_id}")
        await self.send_personal_message({
            "type": "connection_established",
            "user_id": user.id,
            "nickname": user.nickname,
            "timestamp": datetime.utcnow().isoformat(),
            "room_id": current_room_id
        }, user.id)
    
    async def disconnect(self, user_id: int):
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç WebSocket.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.active_connections:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if user_id in self.user_room:
                room_id = self.user_room[user_id]
                await self.broadcast_to_room({
                    "type": "player_disconnected",
                    "user_id": user_id,
                    "timestamp": datetime.utcnow().isoformat()
                }, room_id, exclude_user=user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            del self.active_connections[user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            if user_id in self.user_room:
                room_id = self.user_room[user_id]
                self.room_users[room_id].discard(user_id)
                del self.user_room[user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–≥—Ä—ã
            if user_id in self.user_game:
                game_id = self.user_game[user_id]
                self.game_users[game_id].discard(user_id)
                del self.user_game[user_id]
            
            logger.info(f"User {user_id} disconnected from WebSocket")
    
    async def _sync_join_room(self, user_id: int, room_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏).
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
        """
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
        if user_id in self.user_room:
            old_room_id = self.user_room[user_id]
            self.room_users[old_room_id].discard(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
        if room_id not in self.room_users:
            self.room_users[room_id] = set()
        
        self.room_users[room_id].add(user_id)
        self.user_room[user_id] = room_id

    async def join_room(self, user_id: int, room_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await self._sync_join_room(user_id, room_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        await self.broadcast_to_room({
            "type": "player_joined_room",
            "user_id": user_id,
            "room_id": room_id,
            "timestamp": datetime.utcnow().isoformat()
        }, room_id, exclude_user=user_id)
        
        logger.info(f"User {user_id} joined room {room_id}")
    
    async def join_game(self, user_id: int, game_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_id: ID –∏–≥—Ä—ã
        """
        if game_id not in self.game_users:
            self.game_users[game_id] = set()
        
        self.game_users[game_id].add(user_id)
        self.user_game[user_id] = game_id
        
        logger.info(f"User {user_id} joined game {game_id}")
    
    async def leave_room(self, user_id: int):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_room:
            room_id = self.user_room[user_id]
            self.room_users[room_id].discard(user_id)
            del self.user_room[user_id]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
            await self.broadcast_to_room({
                "type": "player_left_room",
                "user_id": user_id,
                "room_id": room_id,
                "timestamp": datetime.utcnow().isoformat()
            }, room_id)
            
            logger.info(f"User {user_id} left room {room_id}")
    
    async def send_personal_message(self, message: dict, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        """
        if user_id in self.active_connections:
            try:
                websocket = self.active_connections[user_id]
                await websocket.send_text(json.dumps(message, default=str))
            except Exception as e:
                logger.error(f"Failed to send message to user {user_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await self.disconnect(user_id)
    
    async def broadcast_to_room(self, message: dict, room_id: int, exclude_user: Optional[int] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
            exclude_user: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å
        """
        if room_id in self.room_users:
            users = self.room_users[room_id].copy()
            if exclude_user:
                users.discard(exclude_user)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in users:
                await self.send_personal_message(message, user_id)
            
            logger.debug(f"Broadcasted message to room {room_id}, {len(users)} users")
    
    async def broadcast_to_game(self, message: dict, game_id: int, exclude_user: Optional[int] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∏–≥—Ä–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            game_id: ID –∏–≥—Ä—ã
            exclude_user: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å
        """
        if game_id in self.game_users:
            users = self.game_users[game_id].copy()
            if exclude_user:
                users.discard(exclude_user)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in users:
                await self.send_personal_message(message, user_id)
            
            logger.debug(f"Broadcasted message to game {game_id}, {len(users)} users")
    
    def get_room_users(self, room_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        return list(self.room_users.get(room_id, set()))
    
    def get_game_users(self, game_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ"""
        return list(self.game_users.get(game_id, set()))
    
    def is_user_connected(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.active_connections
    
    def get_user_room(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_room.get(user_id)
    
    def get_user_game(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_game.get(user_id)
    
    async def ping_user(self, user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if user_id not in self.active_connections:
            return False
        
        try:
            await self.send_personal_message({
                "type": "ping",
                "timestamp": datetime.utcnow().isoformat()
            }, user_id)
            return True
        except:
            await self.disconnect(user_id)
            return False
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return {
            "total_connections": len(self.active_connections),
            "total_rooms": len(self.room_users),
            "total_games": len(self.game_users),
            "rooms_with_users": {room_id: len(users) for room_id, users in self.room_users.items()},
            "games_with_users": {game_id: len(users) for game_id, users in self.game_users.items()}
        }
    
    async def subscribe_to_room_events(self, room_id: int):
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ Redis —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
        """
        if not self.redis_client or room_id in self.redis_event_handlers:
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        async def handle_redis_event(event_data: dict):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Redis —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
            try:
                event_type = event_data.get("event_type")
                event_data_content = event_data.get("event_data", {})
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                ws_message = {
                    "type": event_type,
                    "timestamp": datetime.utcnow().isoformat(),
                    **event_data_content
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ
                await self.broadcast_to_room(ws_message, room_id)
                
                logger.info(f"Redis event '{event_type}' broadcasted to room {room_id}")
                
            except Exception as e:
                logger.error(f"Error handling Redis event for room {room_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.redis_event_handlers[room_id] = handle_redis_event
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Redis —Å–æ–±—ã—Ç–∏—è
        await self.redis_client.subscribe_to_room_events(room_id, handle_redis_event)
        
        logger.info(f"Subscribed to Redis events for room {room_id}")
    
    async def unsubscribe_from_room_events(self, room_id: int):
        """
        –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç Redis —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.
        
        Args:
            room_id: ID –∫–æ–º–Ω–∞—Ç—ã
        """
        if room_id in self.redis_event_handlers:
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø–∏—Å–∫—É –æ—Ç Redis –∫–∞–Ω–∞–ª–∞
            del self.redis_event_handlers[room_id]
            logger.info(f"Unsubscribed from Redis events for room {room_id}")
    
    async def handle_redis_event(self, event_data: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ Redis —Å–æ–±—ã—Ç–∏—è.
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Redis
        """
        try:
            room_id = event_data.get("room_id")
            if not room_id or room_id not in self.redis_event_handlers:
                return
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
            handler = self.redis_event_handlers[room_id]
            await handler(event_data)
            
        except Exception as e:
            logger.error(f"Error handling Redis event: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Redis –≤ main.py)
connection_manager: Optional[ConnectionManager] = None

def get_connection_manager() -> ConnectionManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ConnectionManager"""
    if connection_manager is None:
        raise RuntimeError("ConnectionManager not initialized. Call init_connection_manager() first.")
    return connection_manager

async def init_connection_manager(redis_client: RedisClient):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π ConnectionManager —Å Redis –∫–ª–∏–µ–Ω—Ç–æ–º"""
    global connection_manager
    connection_manager = ConnectionManager(redis_client)
    logger.info("ConnectionManager initialized with Redis client") 