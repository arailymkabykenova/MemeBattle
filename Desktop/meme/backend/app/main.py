"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–ó–¥–µ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —Ä–æ—É—Ç–µ—Ä—ã.
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import traceback
from .core.config import settings
from .core.database import init_database
from .core.redis import init_redis, close_redis, get_redis_client
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from .routers import auth
from .routers import users
from .routers import cards
from .routers import rooms
from .routers import games
from .websocket import routes as websocket_routes
from .websocket.connection_manager import init_connection_manager
from .core.logging import auth_logger


def create_application() -> FastAPI:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    
    Returns:
        FastAPI: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    app = FastAPI(
        title=settings.app_name,
        version=settings.version,
        debug=settings.debug,
        description="Backend API –¥–ª—è iOS –∏–≥—Ä—ã —Å –º–µ–º-–∫–∞—Ä—Ç–æ—á–∫–∞–º–∏",
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.cors_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    @app.exception_handler(Exception)
    async def global_exception_handler(request: Request, exc: Exception):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        error_details = {
            "error_type": type(exc).__name__,
            "error_message": str(exc),
            "path": request.url.path,
            "method": request.method,
            "traceback": traceback.format_exc()
        }
        
        auth_logger.error(
            f"Unhandled exception in {request.method} {request.url.path}",
            extra=error_details
        )
        
        return JSONResponse(
            status_code=500,
            content={"detail": str(exc) if settings.debug else "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
        )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(auth.router)
    app.include_router(users.router)
    app.include_router(cards.router)
    app.include_router(rooms.router)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
    app.include_router(games.router)
    app.include_router(websocket_routes.router, prefix="/websocket", tags=["WebSocket"])  # WebSocket —Ä–æ—É—Ç—ã
    
    return app


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_application()


@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Meme Card Game API...")
    
    try:
        await init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        await init_redis()
        print("‚úÖ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConnectionManager —Å Redis –∫–ª–∏–µ–Ω—Ç–æ–º
        redis_client = get_redis_client()
        await init_connection_manager(redis_client)
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
        print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ Redis")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –∏–∑ Azure –≤ –ë–î
    if settings.auto_load_cards_from_azure:
        try:
            from .services.card_service import CardService
            from .core.database import async_session_maker
            
            async with async_session_maker() as db:
                card_service = CardService(db)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ –ë–î
                stats = await card_service.get_card_statistics()
                total_cards = stats.get("total_cards", 0)
                
                if total_cards == 0:
                    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –∏–∑ Azure –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    result = await card_service.load_all_cards_from_azure()
                    loaded = result.get("total_loaded", 0)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded} –∫–∞—Ä—Ç –∏–∑ Azure!")
                else:
                    print(f"‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {total_cards} –∫–∞—Ä—Ç")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –∏–∑ Azure: {e}")
            print("   –ö–∞—Ä—Ç—ã –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /cards/azure/load-all")
    else:
        print("‚è≠Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")


@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Meme Card Game API...")
    await close_redis()
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")


@app.get("/")
async def root():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API.
    
    Returns:
        dict: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    return {
        "message": "Meme Card Game API",
        "version": "1.0.0",
        "status": "running",
        "endpoints": {
            "auth": "/auth",
            "users": "/users", 
            "cards": "/cards",
            "rooms": "/rooms",
            "games": "/games",
            "websocket": "/websocket/ws",
            "docs": "/docs"
        }
    }


@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    """
    from .core.redis import redis_client
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    redis_status = "connected" if redis_client else "disconnected"
    
    return {
        "status": "healthy",
        "app_name": settings.app_name,
        "version": settings.version,
        "database": "connected",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É DB
        "redis": redis_status,
        "azure": "configured"     # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É Azure
    }


@app.get("/models/info")
async def models_info():
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from .models import User, Card, UserCard
    from .models.user import Gender
    from .models.card import CardType
    
    return {
        "message": "–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã",
        "models": {
            "users": {
                "table_name": User.__tablename__,
                "fields": ["id", "nickname", "birth_date", "gender", "rating", "created_at"],
                "gender_options": [g.value for g in Gender]
            },
            "cards": {
                "table_name": Card.__tablename__, 
                "fields": ["id", "name", "image_url", "card_type", "is_unique", "created_at"],
                "card_types": [t.value for t in CardType]
            },
            "user_cards": {
                "table_name": UserCard.__tablename__,
                "fields": ["id", "user_id", "card_id", "obtained_at"]
            }
        },
        "database_status": "configured" if settings.database_url else "not_configured"
    } 